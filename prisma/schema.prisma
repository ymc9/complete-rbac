//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

/// User model
model User {
  id                   String         @id() @default(cuid())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt()
  email                String         @unique()
  memberships          Membership[]
  createdOrganizations Organization[] @relation("createdBy")
  createdMemberships   Membership[]   @relation("createdBy")
  createdRoles         Role[]         @relation("createdBy")
  createdPermissions   Permission[]   @relation("createdBy")
  createdResources     Resource[]     @relation("createdBy")
}

/// Organization model
model Organization {
  id          String       @id() @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  createdBy   User         @relation("createdBy", fields: [createdById], references: [id])
  createdById String
  name        String
  memberships Membership[]
  roles       Role[]
  permissions Permission[]
  resources   Resource[]
}

/// Organization membership model
model Membership {
  id             String       @id() @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  createdBy      User         @relation("createdBy", fields: [createdById], references: [id])
  createdById    String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  roles          Role[]

  @@unique([userId, organizationId])
}

/// Organization role model
model Role {
  id             String       @id() @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  createdBy      User         @relation("createdBy", fields: [createdById], references: [id])
  createdById    String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String
  permissions    Permission[]
  memberships    Membership[]

  @@unique([name, organizationId])
}

/// Organization permission model
model Permission {
  id             String       @id() @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  createdBy      User         @relation("createdBy", fields: [createdById], references: [id])
  createdById    String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  resource       String
  action         String
  roles          Role[]
}

/// Resource base model
model Resource {
  id                 String       @id() @default(cuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt()
  createdBy          User         @relation("createdBy", fields: [createdById], references: [id])
  createdById        String
  name               String
  type               String
  organization       Organization @relation(fields: [organizationId], references: [id])
  organizationId     String
  delegate_aux_post  Post?
  delegate_aux_video Video?
}

/// Post resource model
model Post {
  id                    String   @id()
  title                 String
  content               String?
  published             Boolean  @default(false)
  delegate_aux_resource Resource @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// Video resource model
model Video {
  id                    String   @id()
  url                   String
  delegate_aux_resource Resource @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
